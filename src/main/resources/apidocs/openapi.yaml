openapi: 3.0.1
info:
  title: Einsatzleitplatz
  version: 0.0.1
servers:
- url: http://localhost
  description: Generated server url
security:
- Basic: []
paths:
  /journal/{id}:
    get:
      tags:
      - journal-controller
      operationId: getJournalEntry
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JournalEntry"
    put:
      tags:
      - journal-controller
      operationId: updateJournalEntry
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateJournalEntryDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JournalEntry"
    delete:
      tags:
      - journal-controller
      operationId: deleteEntry
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteJournalEntryDto"
      responses:
        "204":
          description: No Content
    patch:
      tags:
      - journal-controller
      operationId: restoreEntry
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchJournalEntryDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JournalEntry"
  /users/login:
    post:
      tags:
      - user-controller
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /operations:
    get:
      tags:
      - operation-controller
      operationId: getOperations
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Operation"
    post:
      tags:
      - operation-controller
      operationId: createOperation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOperation"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
  /journal:
    get:
      tags:
      - journal-controller
      operationId: getJournal
      parameters:
      - name: operationId
        in: query
        required: true
        schema:
          type: string
          format: uuid
      - name: offset
        in: query
        required: false
        schema:
          minimum: 0
          type: number
          default: 0
      - name: limit
        in: query
        required: false
        schema:
          maximum: 200
          minimum: 1
          type: number
          default: 50
      - name: sort
        in: query
        description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JournalEntryList"
    post:
      tags:
      - journal-controller
      operationId: createJournalEntry
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateJournalEntry"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JournalEntry"
  /users:
    get:
      tags:
      - user-controller
      operationId: getUsers
      parameters:
      - name: offset
        in: query
        required: false
        schema:
          minimum: 0
          type: number
          default: 0
      - name: limit
        in: query
        required: false
        schema:
          maximum: 200
          minimum: 1
          type: number
          default: 50
      - name: sort
        in: query
        description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserList"
  /users/{id}:
    get:
      tags:
      - user-controller
      operationId: getUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /sse:
    get:
      tags:
      - sse-controller
      operationId: subscribe
      responses:
        "200":
          description: OK
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/SseEmitter"
  /sse/names:
    get:
      tags:
      - sse-controller
      operationId: sseNames
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EventName"
  /operations/{id}:
    get:
      tags:
      - operation-controller
      operationId: getOperation
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
  /operations/names:
    get:
      tags:
      - operation-controller
      operationId: getOperationNames
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OperationName"
components:
  schemas:
    UpdateJournalEntryDto:
      type: object
      properties:
        text:
          type: string
    JournalEntry:
      required:
      - createdAt
      - createdBy
      - id
      - operationId
      - text
      type: object
      properties:
        id:
          type: string
          format: uuid
        operationId:
          type: string
          format: uuid
        createdBy:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        journalEntryId:
          type: integer
          format: int64
        text:
          type: string
        isDeleted:
          type: boolean
    Login:
      required:
      - password
      - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    User:
      required:
      - id
      - username
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
    CreateOperation:
      required:
      - name
      type: object
      properties:
        name:
          type: string
    Operation:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    CreateJournalEntry:
      required:
      - operationId
      - text
      type: object
      properties:
        operationId:
          type: string
          format: uuid
        text:
          type: string
    PatchJournalEntryDto:
      type: object
      properties:
        isDeleted:
          type: boolean
    Pagination:
      required:
      - currentPage
      - limit
      - offset
      - totalElements
      - totalPages
      type: object
      properties:
        offset:
          type: integer
          format: int32
        limit:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
        totalPages:
          type: integer
          format: int32
    UserList:
      required:
      - data
      - pagination
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/User"
        pagination:
          $ref: "#/components/schemas/Pagination"
    SseEmitter:
      type: object
      properties:
        timeout:
          type: integer
          format: int64
    EventName:
      type: string
      enum:
      - CHANGED_JOURNAL_ENTRY
    OperationName:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    JournalEntryList:
      required:
      - data
      - pagination
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/JournalEntry"
        pagination:
          $ref: "#/components/schemas/Pagination"
    DeleteJournalEntryDto:
      type: object
      properties:
        reason:
          type: string
  securitySchemes:
    Basic:
      type: http
      scheme: basic
