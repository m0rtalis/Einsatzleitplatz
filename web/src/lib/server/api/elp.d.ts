/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/users/login": {
    post: operations["login"];
  };
  "/operations": {
    get: operations["getOperations"];
    post: operations["createOperation"];
  };
  "/journal": {
    get: operations["getJournal"];
    post: operations["createJournalEntry"];
  };
  "/users": {
    get: operations["getUsers"];
  };
  "/users/{id}": {
    get: operations["getUser"];
  };
  "/sse": {
    get: operations["subscribe"];
  };
  "/sse/names": {
    get: operations["sseNames"];
  };
  "/operations/{id}": {
    get: operations["getOperation"];
  };
  "/operations/names": {
    get: operations["getOperationNames"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Login: {
      username: string;
      password: string;
    };
    User: {
      /** Format: uuid */
      id: string;
      username: string;
    };
    CreateOperation: {
      name: string;
    };
    Operation: {
      /** Format: uuid */
      id: string;
      name: string;
    };
    CreateJournalEntry: {
      /** Format: uuid */
      operationId: string;
      text: string;
    };
    JournalEntry: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      operationId: string;
      /** Format: uuid */
      createdBy: string;
      /** @enum {string} */
      component: "JOURNAL" | "OPERATION" | "USER";
      /** Format: date-time */
      createdAt: string;
      /** Format: int64 */
      journalEntryId: number;
      text: string;
    };
    Pagination: {
      /** Format: int32 */
      offset: number;
      /** Format: int32 */
      limit: number;
      /** Format: int32 */
      totalElements: number;
      /** Format: int32 */
      currentPage?: number;
      /** Format: int32 */
      totalPages?: number;
      lastPage?: boolean;
    };
    UserList: {
      data: components["schemas"]["User"][];
      pagination: components["schemas"]["Pagination"];
    };
    SseEmitter: {
      /** Format: int64 */
      timeout?: number;
    };
    /** @enum {string} */
    EventName: "NEW_JOURNAL_ENTRY";
    OperationName: {
      /** Format: uuid */
      id: string;
      name: string;
    };
    JournalEntryList: {
      data: components["schemas"]["JournalEntry"][];
      pagination: components["schemas"]["Pagination"];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  login: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Login"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  getOperations: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Operation"][];
        };
      };
    };
  };
  createOperation: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateOperation"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["Operation"];
        };
      };
    };
  };
  getJournal: {
    parameters: {
      query: {
        operationId: string;
        offset?: string;
        limit?: string;
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["JournalEntryList"];
        };
      };
    };
  };
  createJournalEntry: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateJournalEntry"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["JournalEntry"];
        };
      };
    };
  };
  getUsers: {
    parameters: {
      query?: {
        offset?: string;
        limit?: string;
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserList"];
        };
      };
    };
  };
  getUser: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  subscribe: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "text/event-stream": components["schemas"]["SseEmitter"];
        };
      };
    };
  };
  sseNames: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EventName"][];
        };
      };
    };
  };
  getOperation: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Operation"];
        };
      };
    };
  };
  getOperationNames: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["OperationName"][];
        };
      };
    };
  };
}
