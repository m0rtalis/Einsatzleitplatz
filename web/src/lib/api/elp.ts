/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	readonly '/journal/{id}': {
		readonly parameters: {
			readonly query?: never;
			readonly header?: never;
			readonly path?: never;
			readonly cookie?: never;
		};
		readonly get: operations['getJournalEntry'];
		readonly put: operations['updateJournalEntry'];
		readonly post?: never;
		readonly delete: operations['deleteEntry'];
		readonly options?: never;
		readonly head?: never;
		readonly patch?: never;
		readonly trace?: never;
	};
	readonly '/users/login': {
		readonly parameters: {
			readonly query?: never;
			readonly header?: never;
			readonly path?: never;
			readonly cookie?: never;
		};
		readonly get?: never;
		readonly put?: never;
		readonly post: operations['login'];
		readonly delete?: never;
		readonly options?: never;
		readonly head?: never;
		readonly patch?: never;
		readonly trace?: never;
	};
	readonly '/operations': {
		readonly parameters: {
			readonly query?: never;
			readonly header?: never;
			readonly path?: never;
			readonly cookie?: never;
		};
		readonly get: operations['getOperations'];
		readonly put?: never;
		readonly post: operations['createOperation'];
		readonly delete?: never;
		readonly options?: never;
		readonly head?: never;
		readonly patch?: never;
		readonly trace?: never;
	};
	readonly '/journal': {
		readonly parameters: {
			readonly query?: never;
			readonly header?: never;
			readonly path?: never;
			readonly cookie?: never;
		};
		readonly get: operations['getJournal'];
		readonly put?: never;
		readonly post: operations['createJournalEntry'];
		readonly delete?: never;
		readonly options?: never;
		readonly head?: never;
		readonly patch?: never;
		readonly trace?: never;
	};
	readonly '/users': {
		readonly parameters: {
			readonly query?: never;
			readonly header?: never;
			readonly path?: never;
			readonly cookie?: never;
		};
		readonly get: operations['getUsers'];
		readonly put?: never;
		readonly post?: never;
		readonly delete?: never;
		readonly options?: never;
		readonly head?: never;
		readonly patch?: never;
		readonly trace?: never;
	};
	readonly '/users/{id}': {
		readonly parameters: {
			readonly query?: never;
			readonly header?: never;
			readonly path?: never;
			readonly cookie?: never;
		};
		readonly get: operations['getUser'];
		readonly put?: never;
		readonly post?: never;
		readonly delete?: never;
		readonly options?: never;
		readonly head?: never;
		readonly patch?: never;
		readonly trace?: never;
	};
	readonly '/sse': {
		readonly parameters: {
			readonly query?: never;
			readonly header?: never;
			readonly path?: never;
			readonly cookie?: never;
		};
		readonly get: operations['subscribe'];
		readonly put?: never;
		readonly post?: never;
		readonly delete?: never;
		readonly options?: never;
		readonly head?: never;
		readonly patch?: never;
		readonly trace?: never;
	};
	readonly '/sse/names': {
		readonly parameters: {
			readonly query?: never;
			readonly header?: never;
			readonly path?: never;
			readonly cookie?: never;
		};
		readonly get: operations['sseNames'];
		readonly put?: never;
		readonly post?: never;
		readonly delete?: never;
		readonly options?: never;
		readonly head?: never;
		readonly patch?: never;
		readonly trace?: never;
	};
	readonly '/operations/{id}': {
		readonly parameters: {
			readonly query?: never;
			readonly header?: never;
			readonly path?: never;
			readonly cookie?: never;
		};
		readonly get: operations['getOperation'];
		readonly put?: never;
		readonly post?: never;
		readonly delete?: never;
		readonly options?: never;
		readonly head?: never;
		readonly patch?: never;
		readonly trace?: never;
	};
	readonly '/operations/names': {
		readonly parameters: {
			readonly query?: never;
			readonly header?: never;
			readonly path?: never;
			readonly cookie?: never;
		};
		readonly get: operations['getOperationNames'];
		readonly put?: never;
		readonly post?: never;
		readonly delete?: never;
		readonly options?: never;
		readonly head?: never;
		readonly patch?: never;
		readonly trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		readonly JournalEntry: {
			/** Format: uuid */
			readonly id: string;
			/** Format: uuid */
			readonly operationId: string;
			/** Format: uuid */
			readonly createdBy: string;
			/** Format: date-time */
			readonly createdAt: string;
			/** Format: int64 */
			readonly journalEntryId?: number;
			readonly text: string;
			readonly isDeleted?: boolean;
		};
		readonly Login: {
			readonly username: string;
			readonly password: string;
		};
		readonly User: {
			/** Format: uuid */
			readonly id: string;
			readonly username: string;
		};
		readonly CreateOperation: {
			readonly name: string;
		};
		readonly Operation: {
			/** Format: uuid */
			readonly id: string;
			readonly name: string;
		};
		readonly CreateJournalEntry: {
			/** Format: uuid */
			readonly operationId: string;
			readonly text: string;
		};
		readonly Pagination: {
			/** Format: int32 */
			readonly offset?: number;
			/** Format: int32 */
			readonly limit?: number;
			/** Format: int32 */
			readonly totalElements?: number;
			/** Format: int32 */
			readonly totalPages?: number;
			readonly lastPage?: boolean;
			/** Format: int32 */
			readonly currentPage?: number;
		};
		readonly UserList: {
			readonly data: readonly components['schemas']['User'][];
			readonly pagination: components['schemas']['Pagination'];
		};
		readonly SseEmitter: {
			/** Format: int64 */
			readonly timeout?: number;
		};
		/** @enum {string} */
		readonly EventName: EventName;
		readonly OperationName: {
			/** Format: uuid */
			readonly id: string;
			readonly name: string;
		};
		readonly JournalEntryList: {
			readonly data: readonly components['schemas']['JournalEntry'][];
			readonly pagination: components['schemas']['Pagination'];
		};
		readonly DeleteJournalEntryDto: {
			readonly reason?: string;
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
	readonly getJournalEntry: {
		readonly parameters: {
			readonly query?: never;
			readonly header?: never;
			readonly path: {
				readonly id: string;
			};
			readonly cookie?: never;
		};
		readonly requestBody?: never;
		readonly responses: {
			/** @description OK */
			readonly 200: {
				headers: {
					readonly [name: string]: unknown;
				};
				content: {
					readonly 'application/json': components['schemas']['JournalEntry'];
				};
			};
		};
	};
	readonly updateJournalEntry: {
		readonly parameters: {
			readonly query?: never;
			readonly header?: never;
			readonly path: {
				readonly id: string;
			};
			readonly cookie?: never;
		};
		readonly requestBody: {
			readonly content: {
				readonly 'application/json': string;
			};
		};
		readonly responses: {
			/** @description OK */
			readonly 200: {
				headers: {
					readonly [name: string]: unknown;
				};
				content: {
					readonly 'application/json': components['schemas']['JournalEntry'];
				};
			};
		};
	};
	readonly deleteEntry: {
		readonly parameters: {
			readonly query?: never;
			readonly header?: never;
			readonly path: {
				readonly id: string;
			};
			readonly cookie?: never;
		};
		readonly requestBody?: {
			readonly content: {
				readonly 'application/json': components['schemas']['DeleteJournalEntryDto'];
			};
		};
		readonly responses: {
			/** @description No Content */
			readonly 204: {
				headers: {
					readonly [name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	readonly login: {
		readonly parameters: {
			readonly query?: never;
			readonly header?: never;
			readonly path?: never;
			readonly cookie?: never;
		};
		readonly requestBody: {
			readonly content: {
				readonly 'application/json': components['schemas']['Login'];
			};
		};
		readonly responses: {
			/** @description OK */
			readonly 200: {
				headers: {
					readonly [name: string]: unknown;
				};
				content: {
					readonly 'application/json': components['schemas']['User'];
				};
			};
		};
	};
	readonly getOperations: {
		readonly parameters: {
			readonly query?: never;
			readonly header?: never;
			readonly path?: never;
			readonly cookie?: never;
		};
		readonly requestBody?: never;
		readonly responses: {
			/** @description OK */
			readonly 200: {
				headers: {
					readonly [name: string]: unknown;
				};
				content: {
					readonly 'application/json': readonly components['schemas']['Operation'][];
				};
			};
		};
	};
	readonly createOperation: {
		readonly parameters: {
			readonly query?: never;
			readonly header?: never;
			readonly path?: never;
			readonly cookie?: never;
		};
		readonly requestBody: {
			readonly content: {
				readonly 'application/json': components['schemas']['CreateOperation'];
			};
		};
		readonly responses: {
			/** @description Created */
			readonly 201: {
				headers: {
					readonly [name: string]: unknown;
				};
				content: {
					readonly 'application/json': components['schemas']['Operation'];
				};
			};
		};
	};
	readonly getJournal: {
		readonly parameters: {
			readonly query: {
				readonly operationId: string;
				readonly offset?: string;
				readonly limit?: string;
				/** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
				readonly sort?: readonly string[];
			};
			readonly header?: never;
			readonly path?: never;
			readonly cookie?: never;
		};
		readonly requestBody?: never;
		readonly responses: {
			/** @description OK */
			readonly 200: {
				headers: {
					readonly [name: string]: unknown;
				};
				content: {
					readonly 'application/json': components['schemas']['JournalEntryList'];
				};
			};
		};
	};
	readonly createJournalEntry: {
		readonly parameters: {
			readonly query?: never;
			readonly header?: never;
			readonly path?: never;
			readonly cookie?: never;
		};
		readonly requestBody: {
			readonly content: {
				readonly 'application/json': components['schemas']['CreateJournalEntry'];
			};
		};
		readonly responses: {
			/** @description Created */
			readonly 201: {
				headers: {
					readonly [name: string]: unknown;
				};
				content: {
					readonly 'application/json': components['schemas']['JournalEntry'];
				};
			};
		};
	};
	readonly getUsers: {
		readonly parameters: {
			readonly query?: {
				readonly offset?: string;
				readonly limit?: string;
				/** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
				readonly sort?: readonly string[];
			};
			readonly header?: never;
			readonly path?: never;
			readonly cookie?: never;
		};
		readonly requestBody?: never;
		readonly responses: {
			/** @description OK */
			readonly 200: {
				headers: {
					readonly [name: string]: unknown;
				};
				content: {
					readonly 'application/json': components['schemas']['UserList'];
				};
			};
		};
	};
	readonly getUser: {
		readonly parameters: {
			readonly query?: never;
			readonly header?: never;
			readonly path: {
				readonly id: string;
			};
			readonly cookie?: never;
		};
		readonly requestBody?: never;
		readonly responses: {
			/** @description OK */
			readonly 200: {
				headers: {
					readonly [name: string]: unknown;
				};
				content: {
					readonly 'application/json': components['schemas']['User'];
				};
			};
		};
	};
	readonly subscribe: {
		readonly parameters: {
			readonly query?: never;
			readonly header?: never;
			readonly path?: never;
			readonly cookie?: never;
		};
		readonly requestBody?: never;
		readonly responses: {
			/** @description OK */
			readonly 200: {
				headers: {
					readonly [name: string]: unknown;
				};
				content: {
					readonly 'text/event-stream': components['schemas']['SseEmitter'];
				};
			};
		};
	};
	readonly sseNames: {
		readonly parameters: {
			readonly query?: never;
			readonly header?: never;
			readonly path?: never;
			readonly cookie?: never;
		};
		readonly requestBody?: never;
		readonly responses: {
			/** @description OK */
			readonly 200: {
				headers: {
					readonly [name: string]: unknown;
				};
				content: {
					readonly 'application/json': readonly components['schemas']['EventName'][];
				};
			};
		};
	};
	readonly getOperation: {
		readonly parameters: {
			readonly query?: never;
			readonly header?: never;
			readonly path: {
				readonly id: string;
			};
			readonly cookie?: never;
		};
		readonly requestBody?: never;
		readonly responses: {
			/** @description OK */
			readonly 200: {
				headers: {
					readonly [name: string]: unknown;
				};
				content: {
					readonly 'application/json': components['schemas']['Operation'];
				};
			};
		};
	};
	readonly getOperationNames: {
		readonly parameters: {
			readonly query?: never;
			readonly header?: never;
			readonly path?: never;
			readonly cookie?: never;
		};
		readonly requestBody?: never;
		readonly responses: {
			/** @description OK */
			readonly 200: {
				headers: {
					readonly [name: string]: unknown;
				};
				content: {
					readonly 'application/json': readonly components['schemas']['OperationName'][];
				};
			};
		};
	};
}
export enum EventName {
	CREATE_JOURNAL_ENTRY = 'CREATE_JOURNAL_ENTRY',
	UPDATE_JOURNAL_ENTRY = 'UPDATE_JOURNAL_ENTRY',
	DELETE_JOURNAL_ENTRY = 'DELETE_JOURNAL_ENTRY',
}
